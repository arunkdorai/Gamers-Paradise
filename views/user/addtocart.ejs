<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Cart - Gamers Paradise</title>
    <link rel="shortcut icon" type="image/x-icon" href="images/logo.ico">

    <!-- Bootstrap CSS -->
    <link
      href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <!-- Font Awesome CSS -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css"
      rel="stylesheet"
    />
   
    <link rel="stylesheet" href="/css/cart.css"> 
    <style>
      .container {
          max-width: 1200px;
          margin: 0 auto;
          padding: 20px;
      }
    
      h1 {
          color: #333;
          text-align: center;
          margin-bottom: 30px;
      }
    
      .shopping-cart {
          background: #ffffff;
          border-radius: 8px;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          padding: 20px;
          margin-bottom: 30px;
      }
    
      .cart-table {
          width: 100%;
          border-collapse: separate;
          border-spacing: 0 15px;
      }
    
      .cart-table th {
          display: flex;
          justify-content:center;
          align-items: center;
          background-color: #f8f9fa;
          color: #495057;
          font-weight: 600;
          text-transform: uppercase;
          padding: 12px;
          text-align:center;
          border-bottom: 2px solid #dee2e6;
      }
    
      .cart-table td {
          display:flex;
          justify-content:center;
          align-items: center;
          padding: 12px;
          vertical-align: middle;
          background-color: #ffffff;
      }
    
      .cart-table tr {
          display: flex;
          justify-content:space-evenly;
          box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      }
    
      .product-info {
          display: flex;
          align-items: center;
      }
    
      .product-image {
          margin-right: 15px;
      }
    
      .product-image img {
          max-width: 80px;
          height: auto;
          border-radius: 4px;
      }
    
      .product-name {
          font-weight: 500;
          color: #212529;
      }
    
      .product-price, .product-total {
          font-weight: 600;
          color: #28a745;
      }
    
      .original-price {
          text-decoration: line-through;
          color: #6c757d;
          margin-right: 5px;
      }
    
      .offer-price {
          color: #dc3545;
      }
    
      .quantity-wrapper {
          display: flex;
          align-items: center;
          justify-content: center;
      }
    
      .quantity-btn {
          background-color: #e9ecef;
          border: none;
          color: #495057;
          padding: 5px 10px;
          cursor: pointer;
      }
    
      .quantity-input {
          width: 50px;
          text-align: center;
          border: 1px solid #ced4da;
          border-radius: 4px;
          padding: 5px;
          margin: 0 5px;
      }
    
      .remove-btn {
          background-color: #dc3545;
          color: white;
          border: none;
          padding: 5px 10px;
          border-radius: 4px;
          cursor: pointer;
      }
    
      .remove-btn:hover {
          background-color: #c82333;
      }
    
      .cart-totals {
          margin-top: 30px;
          text-align: right;
      }
    
      .cart-totals table {
          width: 100%;
          max-width: 400px;
          margin-left: auto;
      }
    
      .cart-totals th {
          text-align: left;
          padding: 10px;
      }
    
      .cart-totals td {
          text-align: right;
          padding: 10px;
          font-weight: 600;
      }
    
      .total-row {
          border-top: 2px solid #dee2e6;
          font-size: 1.2em;
      }
    
      .checkout-btn {
          background-color: #28a745;
          color: white;
          border: none;
          padding: 10px 20px;
          border-radius: 4px;
          font-size: 1.1em;
          margin-top: 20px;
          cursor: pointer;
      }
    
      .checkout-btn:hover {
          background-color: #218838;
      }
    
      /* @media (max-width: 768px) {
          .cart-table, .cart-table tbody, .cart-table tr, .cart-table td {
              display: block;
          }
    
          .cart-table thead {
              display: none;
          }
    
          .cart-table tr {
              margin-bottom: 15px;
          }
    
          .cart-table td {
              text-align: right;
              padding-left: 50%;
              position: relative;
          }
    
          .cart-table td::before {
              content: attr(data-label);
              position: absolute;
              left: 6px;
              width: 45%;
              padding-right: 10px;
              white-space: nowrap;
              text-align: left;
              font-weight: bold;
          }
    
          .product-info {
              justify-content: flex-end;
          }
    
          .quantity-wrapper {
              justify-content: flex-end;
          }
      } */
    </style>
        <style>
          :root {
      --primary-color: #552FA8;
      --secondary-color: #2eaccc;
      --accent-color: #e74c3c;
      --text-color: #333;
      --light-bg: #f8f9fa;
    }
    
    body {
      font-family: 'Arial', sans-serif;
      color: var(--text-color);
    }
    
    /* Navbar styles */
    .navbar {
      background-color: var(--primary-color) !important;
      padding: 15px 0;
    }
    
    .navbar-brand img {
      height: 80px;
    }
    
    .navbar-nav .nav-link {
      color: white !important;
      font-weight: bold;
      margin: 0 10px;
      transition: color 0.3s ease;
    }
    
    .navbar-nav .nav-link:hover {
      color: var(--secondary-color) !important;
    }
    
    @media (min-width: 576px) {
        .mr-sm-2, .mx-sm-2 {
            margin-right: -1.5rem !important;
        }
    }
    
    .wishlist-icon, .cart-icon {
      color: white;
      font-size: 1.2em;
      margin: 0 10px;
      transition: color 0.3s ease;
    }
    
    .wishlist-icon:hover, .cart-icon:hover {
      color: var(--secondary-color);
    }
    
    .user-info .nav-link {
      color: white !important;
    }
    
    .dropdown-menu {
      background-color: var(--light-bg);
    }
    
    .dropdown-item {
      color: var(--text-color);
      transition: background-color 0.3s ease;
    }
    
    .dropdown-item:hover {
      background-color: var(--primary-color);
      color: white;
    }
        </style>
  </head>
  <body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <!-- Logo -->
      <a class="navbar-brand" href="/"
        ><img src="/images/logo.png" alt="Logo"
      /></a>
      <!-- Nav Links -->
      <div class="collapse navbar-collapse" id="navbarNav">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link" href="/">HOME</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/console">CONSOLE</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/games">GAMES</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/computer">COMPUTER</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/shop">SHOP</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/about">ABOUT US</a>
          </li>
        </ul>
      </div>
      
      <!-- Wishlist Icon with Link -->
      <a href="/wishlist" class="wishlist-icon"><i class="fas fa-heart" ></i></a>
      <!-- Add-to-Cart Icon with Link -->
      <a href="/add-to-cart" class="cart-icon"><i class="fas fa-shopping-cart"></i></a>
      <% if (fullName) { %>
        <div class="user-info dropdown">
          <a href="#" class="nav-link dropdown-toggle" id="userDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            <%= fullName %>
          </a>
          <div class="dropdown-menu" aria-labelledby="userDropdown">
            <a class="dropdown-item" href="/profile">Profile</a>
            <div class="dropdown-divider"></div>
            <a class="dropdown-item" href="/logout">Logout</a>
          </div>
        </div>
        <% } else { %>
        <!-- If user is not logged in, display login/signup -->
        <a href="/login" class="nav-link login">LOGIN/SIGNUP</a>
        <% } %>
          <!-- Hamburger Menu Toggle Button -->
          <button class="navbar-toggler ml-auto" type="button" data-toggle="collapse" data-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon">&#9776;</span>
          </button>
  </nav>

  <body>

    <div class="container">
    <h1>Your Shopping Cart</h1>
    <div class="shopping-cart">
      <table class="cart-table">
        <thead>
          <tr>
            <th>Image</th>
            <th>Product</th>
            <th>Stock Status</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Remove</th>
            <th>Total</th>
          </tr>
        </thead>
        <tbody>
          <% if (products.length === 0) { %>
            <tr>
              <td colspan="7">Your cart is empty.</td>
            </tr>
          <% } else { %>
            <% products.forEach(item => { %>
              <% if (item.product && item.product.status) { %>
                <tr class="product" data-stock="<%= item.product.stock %>">
                  <td>
                    <a class="product-image" href="/product/<%= item.product._id %>">
                      <img class="img-fluid" src="<%= item.product.image[0].path %>" alt="<%= item.product.product %>"/>
                    </a>
                  </td>
                  <td class="product-name">
                    <div class="product-id" hidden>
                      <%= item.product._id %>
                    </div>
                    <p class="product-description">
                      <%= item.product.product %>
                    </p>
                  </td>
                  <td class="product-stock">
                    <span class="stock-status"></span>
                    <span class="quantity-error" style="color: red; display: none;"></span>
                  </td>
                  <td class="product-price">
                    <% if (item.product.offerPrice && item.product.offerPrice > 0 && item.product.offerPrice < item.product.price) { %>
                      <span class="original-price"><s><%= item.product.price.toFixed(2) %></s></span>
                      <span class="offer-price"><%= item.product.offerPrice.toFixed(2) %></span>
                    <% } else { %>
                      <%= item.product.price.toFixed(2) %>
                    <% } %>
                  </td>
                  <td class="product-quantity quantity-wrapper">
                    <button class="quantity-btn decrease quantity-btn-table">-</button>
                    <input type="number" value="<%= item.quantity %>" min="1" readonly class="quantity-input quantity-input-table">
                    <button class="quantity-btn increase quantity-btn-table">+</button>
                  </td>
                  <td class="product-removal">
                    <form id="removeFromCartForm" action="/remove-from-cart/<%= item.product._id %>" method="POST">
                      <input type="hidden" name="_method" value="DELETE" />
                      <button class="remove-btn remove-button" type="submit" onclick="removeFromCart('<%= item.product._id %>')">Remove</button>
                    </form>
                  </td>
                  <td class="product-line-price product-total">
                    <% if (item.product.offerPrice && item.product.offerPrice > 0 && item.product.offerPrice < item.product.price) { %>
                      <span class="offer-price"><%= (item.product.offerPrice * item.quantity).toFixed(2) %></span>
                    <% } else { %>
                      <%= (item.product.price * item.quantity).toFixed(2) %>
                    <% } %>
                  </td>
                </tr>
              <% } %>
            <% }) %>
          <% } %>
        </tbody>
      </table>
    
      <div class="cart-totals">
        <table>
          <tr class="totals-item">
            <th>Subtotal:</th>
            <td class="totals-value" id="cart-subtotal">0.00</td>
          </tr>
          <tr class="totals-item">
            <th>Tax (5%):</th>
            <td class="totals-value" id="cart-tax">0.00</td>
          </tr>
          <tr class="totals-item">
            <th>Shipping:</th>
            <td class="totals-value" id="cart-shipping">0.00</td>
          </tr>
          <tr class="totals-item totals-item-total total-row">
            <th>Grand Total:</th>
            <td class="totals-value" id="cart-total">0.00</td>
          </tr>
        </table>
      </div>
      <form id="checkoutForm" action="/checkout" method="POST">
        <input type="hidden" name="cartData" id="cartData">
        <input type="hidden" name="totalPrice" id="totalPrice">
        <input type="hidden" name="shipping" id="shipping">
        <input type="hidden" name="tax" id="tax">
        <button class="checkout checkout-btn" type="submit">Checkout</button>
      </form>      
    </div>
    </div>
    
    <!-- Bootstrap JS and jQuery -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- JavaScript Function to Remove Product from Cart -->
    <script>

      /* Set rates + misc */
      var taxRate = 0.05;
      var shippingRate = 45; // Change shipping rate to 45
      var fadeTime = 200;
      /* Assign actions */
      $(".product-quantity input").change(function () {
        updateQuantity(this);
      });
      $(".product-removal button").click(function () {
        removeItem(this);
      });
      // Update totals when page is loaded
      $(document).ready(function () {
        recalculateCart();
      });
      /* Recalculate cart */
      function recalculateCart() {
        var subtotal = 0;
        /* Sum up row totals */
        $(".product").each(function () {
          var stock = parseInt($(this).data("stock")); // Get stock quantity
          if (stock > 0) { // Check if stock is greater than 0
            var price;
            if ($(this).find(".offer-price").length > 0) {
              // If offer price exists, use it for calculation
              price = parseFloat($(this).find(".offer-price").text());
            } else {
              // Otherwise, use the original price
              price = parseFloat($(this).children(".product-price").text());
            }
            var quantity = parseInt($(this).find(".product-quantity input").val());
            var linePrice = price * quantity;
            subtotal += linePrice;
          }
        });
        /* Calculate totals */
        var tax = subtotal * taxRate;
        var shipping = subtotal > 0 ? shippingRate : 0;
        var total = subtotal + tax + shipping;
        /* Update totals display */
        $(".totals-value").fadeOut(fadeTime, function () {
          $("#cart-subtotal").html(subtotal.toFixed(2));
          $("#cart-tax").html(tax.toFixed(2));
          $("#cart-shipping").html(shipping.toFixed(2));
          $("#cart-total").html(total.toFixed(2));
          if (total == 0) {
            $(".checkout").fadeOut(fadeTime);
          } else {
            $(".checkout").fadeIn(fadeTime);
          }
          $(".totals-value").fadeIn(fadeTime);
        });
      }
      /* Remove item from cart */
      function removeItem(removeButton) {
        /* Remove row from DOM and recalc cart total */
        var productRow = $(removeButton).parent().parent();
        productRow.slideUp(fadeTime, function () {
          productRow.remove();
          recalculateCart();
        });
      }
            

      
      
            function removeFromCart(productId) {
              fetch(`/remove-from-cart/${productId}`, {
                method: "DELETE",
                headers: {
                  "Content-Type": "application/json",
                },
              })
                .then((response) => {
                  if (response.ok) {
                    // Product removed successfully, you can handle the UI update here
                    console.log("Product removed from cart");
                    // Optionally, you can redirect to the cart page after removal
                    window.location.href = "/add-to-cart";
                  } else {
                    // Handle error response
                    console.error("Failed to remove product from cart");
                  }
                })
                .catch((error) => {
                  console.error("Error removing product from cart:", error);
                });
            }
      
            document.addEventListener("DOMContentLoaded", function () {
              const productCards = document.querySelectorAll(".product"); // Select all product cards
        productCards.forEach((card) => {
          const stockStatus = card.querySelector(".stock-status"); // Find the stock status element within the card
          const stock = parseInt(card.dataset.stock); // Get the stock quantity from the data attribute
          if (stock <= 0) {
            stockStatus.textContent = "Out of Stock";
            stockStatus.style.color = "red";
            const addToCartButton = card.querySelector(".product");
            addToCartButton.disabled = true; // Disable add to cart button
            addToCartButton.style.display = "none";
          } else if (stock < 5) {
            stockStatus.textContent = `Limited Stock (${stock} left)`;
            stockStatus.style.color = "orange";
          } else {
            stockStatus.textContent = "In Stock";
            stockStatus.style.color = "green";
          }
        });
      });
      document.addEventListener("DOMContentLoaded", function () {
        const checkoutForm = document.getElementById("checkoutForm");
        const cartDataInput = document.getElementById("cartData");
        const totalPriceInput = document.getElementById("totalPrice");
        const shippingInput = document.getElementById("shipping");
        const taxInput = document.getElementById("tax");
        checkoutForm.addEventListener("submit", async function (event) {
          event.preventDefault();
          // Check for out-of-stock products
          const outOfStockProducts = document.querySelectorAll(".product[data-stock='0']");
          if (outOfStockProducts.length > 0) {
                  alert("Cannot proceed to checkout. Some products are out of stock.");
                  return;
              }
      
               const products = [];
      
              // Loop through each product in the cart
              const productRows = document.querySelectorAll(".product");
              productRows.forEach(productRow => {
                  const productId = productRow.querySelector(".product-id").textContent;
                  const productName = productRow.querySelector(".product-description").textContent;
                  const productQuantity = parseInt(productRow.querySelector(".product-quantity input").value);
                  const productPrice = parseFloat(productRow.querySelector(".product-price").textContent);
                  const productTotalPrice = parseFloat(productRow.querySelector(".product-line-price").textContent);
      
                  // Add product details to the array
                  products.push({
                      _id: productId.trim(),
                      name: productName,
                      quantity: productQuantity,
                      price: productPrice,
                      totalPrice: productTotalPrice
                  });
              });
      
              // Calculate total price
              const totalPrice = parseFloat(document.getElementById("cart-total").textContent);
      
              // Calculate tax
              const taxRate = 0.05; // Tax rate is 5%
              const tax = totalPrice * taxRate;
      
              // Calculate shipping
              let shipping = 45; // Default shipping value is 45
              // You can add additional logic here to calculate shipping dynamically based on certain conditions
              
              // Set the values of hidden inputs
              cartDataInput.value = JSON.stringify(products);
              totalPriceInput.value = totalPrice;
              shippingInput.value = shipping;
              taxInput.value = tax;
      
              // Submit the form
              this.submit();
          });
      });
      
          </script>
      
          <script>
            // Update quantity function
            function updateQuantity(quantityInput) {
              const productRow = $(quantityInput).closest(".product");
              let price;
              if (productRow.find(".offer-price").length > 0) {
                price = parseFloat(productRow.find(".offer-price").text());
              } else {
                price = parseFloat(productRow.find(".product-price").text());
              }
              const quantity = $(quantityInput).val();
              const linePrice = price * quantity;
              
              productRow.find(".product-line-price").fadeOut(fadeTime, function () {
                $(this).text(linePrice.toFixed(2));
                recalculateCart();
                $(this).fadeIn(fadeTime);
              });
            
      
              // Get product ID from the product row
              const productId = productRow.find(".product-id").text();

              // Send update request to backend
                fetch(`/update-cart-quantity/${productId}`, {
                  method: "PATCH",
                  headers: {
                    "Content-Type": "application/json",
                  },
                  body: JSON.stringify({ quantity: quantity }),
                })
                  .then(response => response.json())
                  .then(data => {
                    console.log("Quantity updated successfully:", data);
                  })
                  .catch(error => {
                    console.error("Error updating quantity:", error);
                  });
              }
      
              // Increment and Decrement handlers
              document.addEventListener("DOMContentLoaded", function () {
                const productCards = document.querySelectorAll(".product");
                productCards.forEach((card) => {
                  const decreaseBtn = card.querySelector(".quantity-btn.decrease");
                  const increaseBtn = card.querySelector(".quantity-btn.increase");
                  const quantityInput = card.querySelector(".product-quantity input");
                  const stock = parseInt(card.dataset.stock);
                  
                  decreaseBtn.addEventListener("click", function () {
                    let quantity = parseInt(quantityInput.value);
                    if (quantity > 1) {
                      quantity -= 1;
                      quantityInput.value = quantity;
                      updateQuantity(quantityInput);
                      if (quantity === 1) {
                        Swal.fire({
                          title: 'Minimum Quantity',
                          text: 'You have reached the minimum quantity of 1.',
                          icon: 'info',
                          confirmButtonText: 'OK'
                        });
                      }
                    }
                  });

                        increaseBtn.addEventListener("click", function () {
                  let quantity = parseInt(quantityInput.value);
                  if (quantity < stock && quantity < 5) {
                    quantity += 1;
                    quantityInput.value = quantity;
                    updateQuantity(quantityInput);
                    if (quantity === 5) {
                      Swal.fire({
                        title: 'Maximum Quantity',
                        text: 'You have reached the maximum quantity of 5.',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                      });
                    }
                    else if (quantity == stock) {
                      Swal.fire({
                        title: 'Stock Limit',
                        text: 'The maximum quantity available is ' + stock + '.',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                      });
                    }
                  }
                });
      
                        quantityInput.addEventListener("input", function () {
                    let quantity = parseInt(quantityInput.value);
                    if (quantity > stock) {
                      quantity = stock;
                      Swal.fire({
                        title: 'Stock Limit',
                        text: 'The maximum quantity available is ' + stock + '.',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                      });
                    } else if (quantity < 1) {
                      quantity = 1;
                      Swal.fire({
                        title: 'Minimum Quantity',
                        text: 'The minimum quantity is 1.',
                        icon: 'info',
                        confirmButtonText: 'OK'
                      });
                    } else if (quantity === 5) {
                      Swal.fire({
                        title: 'Maximum Quantity',
                        text: 'The maximum quantity allowed is 5.',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                      });
                    }
                    quantityInput.value = quantity;
                    updateQuantity(quantityInput);
                  });
              });
            });
          </script>

  </body>
</html>
